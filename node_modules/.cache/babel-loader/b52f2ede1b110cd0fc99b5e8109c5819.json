{"ast":null,"code":"/* Action */\nconst ADDONE = 'ADDONE';\nconst ADDTWO = 'ADDTWO';\nconst RESET = 'RESET';\nconst DIVISION = 'DIVISION';\nconst MULTIPLY = 'MULTIPLY';\nconst EQUAL = 'EQUAL';\nconst DECIMAL = 'DECIMAL';\n/* default reducer state */\n\nconst defaultState = {\n  total: 0,\n  numberArray: []\n};\n/* check for zero */\n\nconst notDivisible = 0;\n\nconst reducer = (state = defaultState, action) => {\n  while (action.type != EQUAL) {\n    switch (action.type) {\n      case ADDONE:\n        return { ...state,\n          numberArray: numberArray.concat(1)\n        };\n        break;\n\n      case ADDTWO:\n        return { ...state,\n          numberArray: numberArray.concat(2)\n        };\n        break;\n    }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/cristian/Desktop/mycalculator/src/store/reducer.js"],"names":["ADDONE","ADDTWO","RESET","DIVISION","MULTIPLY","EQUAL","DECIMAL","defaultState","total","numberArray","notDivisible","reducer","state","action","type","concat"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,OAAO,GAAG,SAAhB;AAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,CADW;AAEjBC,EAAAA,WAAW,EAAC;AAFK,CAArB;AAKA;;AACA,MAAMC,YAAY,GAAG,CAArB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAsBM,MAAtB,KAAiC;AAE7C,SAAMA,MAAM,CAACC,IAAP,IAAeT,KAArB,EAA2B;AAEvB,YAAOQ,MAAM,CAACC,IAAd;AACI,WAAKd,MAAL;AACI,eAAM,EACF,GAAGY,KADD;AAEFH,UAAAA,WAAW,EAACA,WAAW,CAACM,MAAZ,CAAmB,CAAnB;AAFV,SAAN;AAIJ;;AACA,WAAKd,MAAL;AACI,eAAM,EACF,GAAGW,KADD;AAEFH,UAAAA,WAAW,EAACA,WAAW,CAACM,MAAZ,CAAmB,CAAnB;AAFV,SAAN;AAIJ;AAZJ;AAcH;AACJ,CAnBD;;AAqBA,eAAeJ,OAAf","sourcesContent":["/* Action */\nconst ADDONE = 'ADDONE'\nconst ADDTWO = 'ADDTWO'\nconst RESET = 'RESET'\nconst DIVISION = 'DIVISION'\nconst MULTIPLY = 'MULTIPLY'\nconst EQUAL = 'EQUAL'\nconst DECIMAL = 'DECIMAL'\n\n/* default reducer state */\nconst defaultState = {\n    total:0,\n    numberArray:[]\n}\n\n/* check for zero */\nconst notDivisible = 0\n\nconst reducer = (state = defaultState,action) => {\n    \n    while(action.type != EQUAL){\n        \n        switch(action.type){\n            case ADDONE:\n                return{\n                    ...state,\n                    numberArray:numberArray.concat(1)\n                }\n            break\n            case ADDTWO:\n                return{\n                    ...state,\n                    numberArray:numberArray.concat(2)\n            }\n            break\n        }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}