{"ast":null,"code":"/* Action */\nconst ADDONE = 'ADDONE';\nconst ADDTWO = 'ADDTWO';\nconst RESET = 'RESET';\nconst DIVISION = 'DIVISION';\nconst MULTIPLY = 'MULTIPLY';\nconst EQUAL = 'EQUAL';\nconst DECIMAL = 'DECIMAL';\n/* check for zero */\n\nconst notDivisible = 0;\n/* default reducer state */\n\nconst defaultState = {\n  total: 0,\n  numberArray: [0, 0, 0]\n};\n\nconst reducer = (state = defaultState, action) => {\n  const copyObj = Object.assign(state);\n\n  if (EQUAL == action.type) {\n    copyObj.numberArray.push(1);\n    console.log(copyObj.numberArray);\n  }\n\n  return { ...state,\n    numberArray: copyObj.numberArray\n  };\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/cristian/Desktop/mycalculator/src/store/reducer.js"],"names":["ADDONE","ADDTWO","RESET","DIVISION","MULTIPLY","EQUAL","DECIMAL","notDivisible","defaultState","total","numberArray","reducer","state","action","copyObj","Object","assign","type","push","console","log"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA;;AACA,MAAMC,YAAY,GAAG,CAArB;AAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,CADW;AAEjBC,EAAAA,WAAW,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL;AAFK,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAsBK,MAAtB,KAAiC;AAC7C,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAd,CAAhB;;AACA,MAAGP,KAAK,IAAIQ,MAAM,CAACI,IAAnB,EAAwB;AAEpBH,IAAAA,OAAO,CAACJ,WAAR,CAAoBQ,IAApB,CAAyB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAACJ,WAApB;AACH;;AAED,SAAM,EACF,GAAGE,KADD;AAEFF,IAAAA,WAAW,EAACI,OAAO,CAACJ;AAFlB,GAAN;AAIH,CAZD;;AAcA,eAAeC,OAAf","sourcesContent":["/* Action */\nconst ADDONE = 'ADDONE'\nconst ADDTWO = 'ADDTWO'\nconst RESET = 'RESET'\nconst DIVISION = 'DIVISION'\nconst MULTIPLY = 'MULTIPLY'\nconst EQUAL = 'EQUAL'\nconst DECIMAL = 'DECIMAL'\n/* check for zero */\nconst notDivisible = 0\n\n/* default reducer state */\nconst defaultState = {\n    total:0,\n    numberArray:[0,0,0]\n}\n\n\n\nconst reducer = (state = defaultState,action) => {\n    const copyObj = Object.assign(state)\n    if(EQUAL == action.type){\n\n        copyObj.numberArray.push(1)\n        console.log(copyObj.numberArray)\n    }\n    \n    return{\n        ...state,\n        numberArray:copyObj.numberArray\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}